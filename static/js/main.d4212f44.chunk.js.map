{"version":3,"sources":["images/avatar.jpg","Modal.js","SingleRecipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ModalForRecipe","props","singleRecipeDetails","Modal","open","isModalOpen","onClose","modalClose","className","src","recipe","images","full_sm","title","story","katies_tip","favorite_count","calories","method","map","i","key","directions","medium","related_recipes","relatedRecipe","full_lg","slug","SingleRecipe","useState","setSingleRecipeDetails","setModalOpen","useEffect","selectedRecipe","fetchSinglerecipeData","recipeClick","axios","post","headers","Authorization","then","result","data","catch","e","console","log","value","App","setRecipe","text","foodTypeFilter","setSelectedRecipe","recipeValue","setRecipeValue","setRecipeClick","fetchRecipeApiData","offSetValue","foodType","fetch","res","json","prevState","recipes","length","logo","Dropdown","filter","item","Menu","type","Item","onClick","defaultValues","initialLoad","pageStart","hasMore","loadMore","useWindow","threshold","recipeDetail","getRecipeDetail","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,oC,sTCwE5BC,G,OApEQ,SAACC,GAEpB,OACE,oCACGA,EAAMC,qBAAuB,kBAACC,EAAA,EAAD,CAAOC,KAAMH,EAAMI,YAAaC,QAASL,EAAMM,WAAYC,UAAU,uBACjG,yBAAKA,UAAU,kCACb,gCACI,yBAAKC,IAAKR,EAAMC,qBAAuBD,EAAMC,oBAAoBQ,QAAUT,EAAMC,oBAAoBQ,OAAOC,QAAUV,EAAMC,oBAAoBQ,OAAOC,OAAOC,WAElK,yBAAKJ,UAAU,yBACX,4BAAKP,EAAMC,qBAAuBD,EAAMC,oBAAoBQ,QAAUT,EAAMC,oBAAoBQ,OAAOG,OACvG,uBAAGL,UAAU,SAASP,EAAMC,qBAAuBD,EAAMC,oBAAoBQ,QAAUT,EAAMC,oBAAoBQ,OAAOI,OACxH,yBAAKN,UAAU,eACb,yBAAKA,UAAU,OAAf,OACA,2BAAIP,EAAMC,qBAAuBD,EAAMC,oBAAoBQ,QAAUT,EAAMC,oBAAoBQ,OAAOK,aAExG,yBAAKP,UAAU,iBACb,uBAAGA,UAAU,SAASP,EAAMC,qBAAuBD,EAAMC,oBAAoBQ,QAAUT,EAAMC,oBAAoBQ,OAAOM,gBACxH,uBAAGR,UAAU,YAAYP,EAAMC,qBAAuBD,EAAMC,oBAAoBQ,QAAUT,EAAMC,oBAAoBQ,OAAOO,SAA3H,YAIR,yBAAKT,UAAU,gCACZ,sCACD,yBAAKA,UAAU,sBACXP,EAAMC,qBACJD,EAAMC,oBAAoBQ,QAC1BT,EAAMC,oBAAoBQ,OAAOQ,OAAOC,KAAI,SAACD,EAAQE,GACnD,OACE,yBAAKC,IAAKD,GACR,6BACE,2BAAIF,EAAOI,YACX,gCACE,yBAAKb,IAAKS,EAAOP,QAAUO,EAAOP,OAAOY,iBAS3D,yBAAKf,UAAU,2BACf,+CACA,yBAAKA,UAAU,6BACbP,EAAMC,qBACJD,EAAMC,oBAAoBsB,iBAC1BvB,EAAMC,oBAAoBsB,gBAAgBL,KAAI,SAACM,EAAeL,GAC5D,OACE,yBAAKC,IAAKD,GACR,yBAAKZ,UAAU,kBACf,gCACE,yBAAKC,IAAKgB,EAAcd,QAAUc,EAAcd,OAAOe,WAEzD,4BAAKD,EAAcE,iBCbxBC,EAzCM,SAAC3B,GAAW,IAAD,EAEyB4B,mBAAS,IAFlC,mBAErB3B,EAFqB,KAED4B,EAFC,OAGOD,oBAAS,GAHhB,mBAGrBxB,EAHqB,KAGT0B,EAHS,KAK5BC,qBAAU,WACN/B,EAAMgC,gBAAkBC,MACzB,CAACjC,EAAMkC,cAEV,IAAMD,EAAwB,WAC1BE,IAAMC,KAAN,0DACuDpC,EAAMgC,eAAeN,MACxE,GACA,CAACW,QAAU,CAAEC,cAAgB,gFAE9BC,MAAK,SAAAC,GAAM,OAENX,EAAuBW,EAAOC,QAC9BX,GAAa,IAElBY,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,OAG9BC,QAAQC,IAAI,sBAAsB5C,GAOlC,OACI,oCACI,kBAAC,EAAD,CACIA,oBAAqBA,EACrBG,YAAaA,EACbE,WAVO,WACfwB,GAAa,GACbD,EAAuB,SCxB3BiB,EAAM,EA2IKC,MAzIf,WAEE,IAFa,EAoBenB,mBAAS,IApBxB,mBAoBNnB,EApBM,KAoBEuC,EApBF,OAqB8BpB,mBAnBpB,CACrB,CAACqB,KAAM,YAAYH,MAAO,IAC1B,CAACG,KAAM,QAAQH,MAAO,IACtB,CAACG,KAAM,SAASH,MAAO,IACvB,CAACG,KAAM,SAASH,MAAO,IACvB,CAACG,KAAM,QAAQH,MAAO,IACtB,CAACG,KAAM,WAAWH,MAAO,IACzB,CAACG,KAAM,SAASH,MAAO,KACvB,CAACG,KAAM,aAAaH,MAAO,KAC3B,CAACG,KAAM,cAAcH,MAAO,IAC5B,CAACG,KAAM,SAASH,MAAO,KACvB,CAACG,KAAM,gBAAgBH,MAAO,KAC9B,CAACG,KAAM,SAASH,MAAO,KACvB,CAACG,KAAM,UAAUH,MAAO,KACxB,CAACG,KAAM,QAAQH,MAAO,OAhBX,mBAqBNI,EArBM,aAsB8BtB,mBAAS,KAtBvC,mBAsBNI,EAtBM,KAsBSmB,EAtBT,OAuBwBvB,mBAAS,MAvBjC,mBAuBNwB,EAvBM,KAuBMC,EAvBN,OAwBwBzB,oBAAS,GAxBjC,mBAwBNM,EAxBM,KAwBMoB,EAxBN,KA2BbvB,qBAAU,WACLwB,EAAmB,KACrB,IAEH,IAAMA,EAAmB,SAACC,EAAYC,GACnCC,MAAM,mEAAD,OAAoEF,GAApE,OAAkFC,EAAS,aAAa,GAAb,OAAgBA,GAAW,KACzHlB,MAAK,SAAAoB,GAAG,OAAIA,EAAIC,UAChBrB,MAAK,SAAAE,GACJO,GAAU,SAAAa,GACR,MAAM,GAAN,mBAAWA,GAAX,YAAyBpB,EAAKqB,aAEhChB,GAAcL,EAAKqB,QAAQC,WAoBjC,OACE,oCACE,yBAAKxD,UAAU,UACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBACb,gCACE,yBAAKC,IAAKwD,OAEZ,4BACE,oCACA,uCACA,wCACA,8CAKR,yBAAKzD,UAAU,kBACb,yBAAKA,UAAU,aACX,oDACA,kBAAC0D,EAAA,EAAD,CACEhB,KAAsB,OAAhBG,EAAuB,mBAAvB,UAA+CF,EAAegB,QAAO,SAAAC,GAAI,OAAIA,EAAKrB,QAAUM,KAAa,GAAGH,MAGlH1C,UAAU,mBAEV,kBAAC0D,EAAA,EAASG,KAAV,KACClB,EAAehC,KAAI,SAAAmD,GAAI,OACtB,kBAACJ,EAAA,EAASK,KAAV,CACErB,KAAMoB,EAAKpB,KAAM7B,IAAKiD,EAAKvB,MAC3ByB,QAAS,SAAC5B,GAAD,OAzCO6B,EAyCwBH,EAxCtDrB,EAAU,IACVK,EAAemB,EAAc1B,YAC7BS,EAAmB,EAAEiB,EAAc1B,OAHR,IAAG0B,YAgD5B,yBAAKjE,UAAU,mBACb,kBAAC,IAAD,CACIkE,aAAa,EACbC,UAAW,EACXC,UAASlE,GAAWA,EAAOsD,OAAS,KACpCa,SAzDW,WACnBrB,EAAmBT,EAAMM,IAyDjByB,WAAW,EACXC,UAAW,KAEb,yBAAKvE,UAAU,aACb,yBAAKA,UAAU,qBACZE,GAAUA,EAAOS,KAAI,SAAC6D,EAAc5D,GACnC,OACE,yBAAKC,IAAKD,GACR,yBAAKZ,UAAU,cAAcgE,QAAS,kBAxDhC,SAACQ,GACvB5B,EAAkB4B,GAClBzB,GAAgBpB,GAsD0C8C,CAAgBD,KACxD,gCACE,yBAAKvE,IAAKuE,EAAarE,OAAOe,WAEhC,4BAAKsD,EAAanE,OAClB,yBAAKL,UAAU,iBACb,uBAAGA,UAAU,SAASwE,EAAahE,gBACnC,2BAAIgE,EAAa/D,SAAjB,mBAYlB,kBAAC,EAAD,CACEkB,YAAaA,EACbF,eAAgBA,MC/HJiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdpD,OAAM,SAAAqD,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.d4212f44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.57ee2ba4.jpg\";","import React from 'react';\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\nimport './modal.css';\n\nconst ModalForRecipe = (props) => {\n\n    return (\n      <>\n        {props.singleRecipeDetails && <Modal open={props.isModalOpen} onClose={props.modalClose} className=\"recipe-detail-modal\">\n          <div className=\"single-recipe-detail-container\">\n            <figure>\n                <img src={props.singleRecipeDetails && props.singleRecipeDetails.recipe && props.singleRecipeDetails.recipe.images && props.singleRecipeDetails.recipe.images.full_sm}/>\n            </figure>\n            <div className=\"single-recipe-details\">\n                <h1>{props.singleRecipeDetails && props.singleRecipeDetails.recipe && props.singleRecipeDetails.recipe.title}</h1>\n                <p className=\"story\">{props.singleRecipeDetails && props.singleRecipeDetails.recipe && props.singleRecipeDetails.recipe.story}</p>\n                <div className=\"cooking-tip\">\n                  <div className=\"tip\">tip</div>\n                  <p>{props.singleRecipeDetails && props.singleRecipeDetails.recipe && props.singleRecipeDetails.recipe.katies_tip}</p>\n                </div>\n                <div className=\"cals-and-like\">\n                  <p className=\"likes\">{props.singleRecipeDetails && props.singleRecipeDetails.recipe && props.singleRecipeDetails.recipe.favorite_count}</p>\n                  <p className=\"calories\">{props.singleRecipeDetails && props.singleRecipeDetails.recipe && props.singleRecipeDetails.recipe.calories} cals</p>\n                </div>\n            </div>\n          </div>\n          <div className=\"preparation-method-container\">\n             <h3>Method</h3>\n            <div className=\"preparation-method\">\n              { props.singleRecipeDetails && \n                  props.singleRecipeDetails.recipe && \n                  props.singleRecipeDetails.recipe.method.map((method, i)=>{\n                    return(\n                      <div key={i}>\n                        <div>\n                          <p>{method.directions}</p>\n                          <figure>\n                            <img src={method.images && method.images.medium} />\n                          </figure>\n                        </div>\n                      </div>\n                    )\n                  })\n              }\n            </div>\n          </div>\n          <div className=\"related-recipes-wrapper\">\n          <h3>Related Recipes</h3>\n          <div className=\"related-recipes-container\">\n          { props.singleRecipeDetails && \n              props.singleRecipeDetails.related_recipes && \n              props.singleRecipeDetails.related_recipes.map((relatedRecipe, i)=>{\n                return(\n                  <div key={i}>\n                    <div className=\"related-recipe\">\n                    <figure>\n                      <img src={relatedRecipe.images && relatedRecipe.images.full_lg} />\n                    </figure>\n                    <h4>{relatedRecipe.slug}</h4>\n                    </div>\n                  </div>\n                )\n              })\n          }\n          </div>\n          </div> \n                {/* <p className=\"cook-time\">{props.singleRecipeDetails && props.singleRecipeDetails.recipe && props.singleRecipeDetails.recipe.variations[0] && props.singleRecipeDetails.recipe.variations.cook_time}</p> */}\n        </Modal>}\n      </>\n    )\n}\n\nexport default ModalForRecipe;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ModalForRecipe from './Modal';\n\nconst SingleRecipe = (props) => {\n    \n    const [singleRecipeDetails,setSingleRecipeDetails] = useState([]);\n    const [isModalOpen,setModalOpen] = useState(false);\n    \n    useEffect(()=>{\n       {props.selectedRecipe && fetchSinglerecipeData()} \n    }, [props.recipeClick])\n\n    const fetchSinglerecipeData = () => {\n        axios.post(\n            `https://dd-staging-backend.tmls.dev/api/recipes/${props.selectedRecipe.slug}`,\n            {},\n            {headers : { Authorization : 'Token token=\"$2a$10$V/lbjvXo8S21cMdcpGVPS.QmBdCJoXdLO0WcJbaCLaI/lTzUkkfyG\"' }} // token\n          )\n          .then(result => \n            \n                setSingleRecipeDetails(result.data),\n                setModalOpen(true)   \n            )\n          .catch(e => console.log(e))\n    }\n\n    console.log(\"singleRecipeDetails\",singleRecipeDetails)\n\n    const modalClose = () =>{\n        setModalOpen(false);\n        setSingleRecipeDetails([])\n    }\n\n    return(\n        <>\n            <ModalForRecipe\n                singleRecipeDetails={singleRecipeDetails}\n                isModalOpen={isModalOpen}\n                modalClose={modalClose}\n            />\n        </>\n    )\n}\n\nexport default SingleRecipe;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport logo from './images/avatar.jpg';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Dropdown } from 'semantic-ui-react';\nimport SingleRecipe from './SingleRecipe';\n\nlet value=0;\n\nfunction App() {\n\n  const filterCategory = [\n    {text: 'Breakfast',value: 67},\n    {text: 'Lunch',value: 14},\n    {text: 'Dinner',value: 10},\n    {text: 'snacks',value: 27},\n    {text: 'Sides',value: 16},\n    {text: 'Desserts',value: 26},\n    {text: 'Baking',value: 577},\n    {text: 'Condiments',value: 515},\n    {text: 'Crock/Insta',value: 22},\n    {text: 'Drinks',value: 115},\n    {text: 'Pasta & Pizza',value: 578},\n    {text: 'salads',value: 503},\n    {text: 'Seafood',value: 579},\n    {text: 'Soups',value: 476}\n  ]\n\n\n  const [recipe, setRecipe] = useState([]);\n  const [foodTypeFilter,setFoodTypeFilter] = useState(filterCategory);\n  const [selectedRecipe,setSelectedRecipe] = useState('');\n  const [recipeValue,setRecipeValue] = useState(null);\n  const [recipeClick,setRecipeClick] = useState(false);\n\n\n  useEffect(() => {\n       fetchRecipeApiData(0);\n  }, [])\n\n  const fetchRecipeApiData=(offSetValue,foodType)=> {\n     fetch(`https://dd-staging-backend.tmls.dev/api/recipes?limit=20&offset=${offSetValue}${foodType?\"&foodtype=\"+`${foodType}`:''}`)\n      .then(res => res.json())\n      .then(data => {\n        setRecipe(prevState => {\n          return [...prevState, ...data.recipes];\n        })\n        value = value+data.recipes.length;\n      }\n    )\n  }\n\n  const scrollToLoad = () => {\n    fetchRecipeApiData(value,recipeValue);\n  }\n\n  const foodTypeFilterChange = (e,defaultValues) => {\n    setRecipe([]);\n    setRecipeValue(defaultValues.value)\n    fetchRecipeApiData(0,defaultValues.value);\n  }\n\n  const getRecipeDetail = (recipeDetail) => {\n    setSelectedRecipe(recipeDetail);\n    setRecipeClick(!recipeClick);\n  }\n\n  return(\n    <>\n      <div className=\"header\">\n        <div className=\"container\">\n          <div className=\"header-content\">\n            <figure>\n              <img src={logo} />\n            </figure>\n            <ul>\n              <li>Home</li>\n              <li>Recipes</li>\n              <li>About Us</li>\n              <li>Contact Us</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div className=\"section-filter\">\n        <div className=\"container\">\n            <h2>Most Popular Recipes</h2>\n            <Dropdown\n              text={recipeValue === null ? 'Select Food Type' : `${foodTypeFilter.filter(item => item.value === recipeValue)[0].text}`  } \n              // options={foodTypeFilter} \n              // onChange={foodTypeFilterChange}\n              className=\"dropdown-filter\"\n            >\n              <Dropdown.Menu>\n              {foodTypeFilter.map(type => (\n                <Dropdown.Item \n                  text={type.text} key={type.value}\n                  onClick={(e) => foodTypeFilterChange(e, type)}  \n                />\n              ))}\n              </Dropdown.Menu>\n            </Dropdown>\n        </div>\n      </div>\n      <div className=\"section-recipes\">\n        <InfiniteScroll\n            initialLoad={false}\n            pageStart={0}\n            hasMore={recipe && (recipe.length > 1000) ?false:true}\n            loadMore={scrollToLoad}\n            useWindow={false}\n            threshold={300}\n        >\n          <div className=\"container\">\n            <div className=\"recipes-container\">\n              {recipe && recipe.map((recipeDetail, i) => {\n                return (\n                  <div key={i}>\n                    <div className=\"recipe-card\" onClick={()=>getRecipeDetail(recipeDetail)} >\n                      <figure>\n                        <img src={recipeDetail.images.full_lg} />\n                      </figure>\n                      <h3>{recipeDetail.title}</h3>\n                      <div className=\"time-and-cals\">\n                        <p className=\"likes\">{recipeDetail.favorite_count}</p>\n                        <p>{recipeDetail.calories} Cals</p>\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </InfiniteScroll>\n      </div>\n\n\n      <SingleRecipe\n        recipeClick={recipeClick}\n        selectedRecipe={selectedRecipe}\n      />\n    </>\n  )\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './common.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}